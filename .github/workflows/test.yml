name: test
on:
  workflow_call:
    inputs:
      haxe:
        required: true
        type: string
      arch:
        required: true
        type: string
      sep:
        required: true
        type: string
      ext:
        required: true
        type: string
      os:
        required: true
        type: string

jobs:
  dependencies:
    runs-on: ${{ inputs.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      
      - name: install haxe
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: ${{ inputs.haxe }}

      - name: install haxe libraries
        run: |
          haxelib install utest
          haxelib git hx4compat https://github.com/HaxeFoundation/hx4compat
          haxelib dev hxcpp ${{ github.workspace }}
          haxelib list

      - name: build run.n
        working-directory: ${{ github.workspace }}/tools/run
        run: haxe compile.hxml

      - name: build hxcpp
        working-directory: ${{ github.workspace }}/tools/hxcpp
        run: haxe compile.hxml

      - name: build cppia
        working-directory: ${{ github.workspace }}/project
        run: haxe compile-cppia.hxml

  haxe:
    runs-on: ${{ inputs.os }}
    needs: dependencies
    defaults:
      run:
        working-directory: test/haxe
    steps:
      - name: build
        run: haxe compile.hxml --debug -D HXCPP_M${{ inputs.arch }}
      - name: run
        run: bin${{ inputs.sep }}TestMain-debug

  cffi:
    runs-on: ${{ inputs.os }}
    needs: dependencies
    defaults:
      run:
        working-directory: test/cffi
    steps:
      - name: build project
        working-directory: test/cffi/project
        run: haxelib run hxcpp build.xml -Ddebug -DHXCPP_M${{ inputs.arch }}
      - name: build
        run: haxe compile.hxml --debug
      - name: build (utf8)
        run: haxe compile-utf8.hxml --debug
      - name: build (neko)
        if: inputs.arch == '64'
        run: haxe compile-neko.hxml --debug
      - name: copy
        if: inputs.arch == '64'
        run: cp test/cffi/project/ndll/*/prime${{ inputs.ext }} test/cffi/bin/neko/prime.ndll
      - name: run
        run: bin${{ inputs.sep }}cpp${{ inputs.sep }}TestMain-debug
      - name: run (utf8)
        run: bin${{ inputs.sep }}cpp-utf8${{ inputs.sep }}TestMain-debug
      - name: run (neko)
        if: inputs.arch == '64'
        working-directory: cffi/bin/neko
        run: neko TestMain.n

  # telemetry:
  #   runs-on: ${{ inputs.os }}
  #   needs: dependencies
  # debugger:
  #   runs-on: ${{ inputs.os }}
  #   needs: dependencies
  # cppia:
  #   runs-on: ${{ inputs.os }}
  #   needs: dependencies
  # native:
  #   runs-on: ${{ inputs.os }}
  #   needs: dependencies
  # std:
  #   runs-on: ${{ inputs.os }}
  #   needs: dependencies
  # haxe-suite:
  #   runs-on: ${{ inputs.os }}
  #   needs: dependencies