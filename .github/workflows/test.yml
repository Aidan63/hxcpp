name: test
on:
  workflow_call:
    inputs:
      haxe:
        required: true
        type: string

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
        arch: [ 32, 64 ]
        exclude:
          # Remove 32bit variants for Mac
          - os: macos-13
            arch: 32
        include:
          # Add some extra OS specific variables
          - sep: '/'
          - sep: '\'
            os: windows-latest
          - libext: '.dso'
            os: ubuntu-latest
          - libext: '.dylib'
            os: macos-13
          - libext: '.dll'
            os: windows-latest
    runs-on: ${{ matrix.os }}
    name: test ${{ matrix.os }} (${{ matrix.arch }}bit)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: ${{ inputs.haxe }}

      ## Dependency Setup
      - name: Install MariaDB
        if: runner.os == 'Linux'
        run: |
          set -ex
          sudo rm -R /var/lib/mysql/
          # mariadb
          curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup > mariadb_repo_setup
          curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup.sha256 > mariadb_repo_setup.sha256
          sha256sum --check mariadb_repo_setup.sha256
          sudo bash mariadb_repo_setup
          sudo apt-get update -qqy
          sudo apt-get remove -qqy mysql-common
          sudo apt-get autoremove -qqy
          sudo apt-get install -qqy mariadb-server
          # remaining packages
          sudo apt-get install -qqy gcc-multilib g++-multilib

      - name: Configure MariaDB
        if: runner.os == 'Linux'
        run: |
          set -ex
          sudo systemctl start mysql
          sudo mysql -u root -e "create database hxcpp; grant all privileges on hxcpp.* to hxcpp@localhost identified by 'hxcpp'; flush privileges;"

      - name: Install Haxe Libraries
        run: |
          haxelib install utest
          haxelib git hx4compat https://github.com/HaxeFoundation/hx4compat
          haxelib dev hxcpp ${{ github.workspace }}
          haxelib list

      - name: Build run.n
        run: |
          cd ${{ github.workspace }}/tools/run
          haxe compile.hxml

      - name: Build Hxcpp
        run: |
          cd ${{ github.workspace }}/tools/hxcpp
          haxe compile.hxml

      - name: Build Cppia
        run: |
          cd ${{ github.workspace }}/project
          haxe compile-cppia.hxml

      ## Haxe
      - name: haxe test - compile
        run: |
          cd ${{ github.workspace }}/test/haxe
          haxe compile.hxml --debug -D HXCPP_M${{ matrix.arch }}

      - name: haxe test - run
        run: |
          cd ${{ github.workspace }}/test/haxe
          bin${{ matrix.sep }}TestMain-debug

      ## CFFI
      - name: build cffi project
        run: |
          cd ${{ github.workspace }}/test/cffi/project
          haxelib run hxcpp build.xml -Ddebug -DHXCPP_M${{ matrix.arch }}

      - name: cffi test - compile
        run: |
          cd ${{ github.workspace }}/test/cffi
          haxe compile.hxml      --debug -D HXCPP_M${{ matrix.arch }}
          haxe compile-utf8.hxml --debug -D HXCPP_M${{ matrix.arch }}
          haxe compile-neko.hxml --debug -D HXCPP_M${{ matrix.arch }}

      - name: cffi test - run
        run: |
          cd ${{ github.workspace }}/test/cffi
          bin${{ matrix.sep }}cpp${{ matrix.sep }}TestMain-debug

      - name: cffi-utf8 test - run
        run: |
          cd ${{ github.workspace }}/test/cffi
          bin${{ matrix.sep }}cpp-utf8${{ matrix.sep }}TestMain-debug

      - name: cffi-neko test - run
        if: matrix.arch == '64'
        run: |
          cp test/cffi/project/ndll/*/prime${{ matrix.libext }} test/cffi/bin/neko/prime.ndll
          cd ${{ github.workspace }}/test/cffi/bin/neko
          neko TestMain.n

      ## Telemetry (debug and non debug)
      - name: telemetry test (debug) - compile
        run: |
          cd ${{ github.workspace }}/test/telemetry
          haxe compile.hxml --debug -D HXCPP_M${{ matrix.arch }}
      - name: telemetry test (debug) - run
        run: |
          cd ${{ github.workspace }}/test/telemetry
          bin${{ matrix.sep }}TestMain-debug
      - name: telemetry test - compile
        run: |
          cd ${{ github.workspace }}/test/telemetry
          haxe compile.hxml -D HXCPP_M${{ matrix.arch }}
      - name: telemetry test - run
        run: |
          cd ${{ github.workspace }}/test/telemetry
          bin${{ matrix.sep }}TestMain

      ## Std
      - name: std test - compile
        run: |
          cd ${{ github.workspace }}/test/std
          haxe compile${{ matrix.arch }}.hxml
      - name: std test - run
        run: |
          cd ${{ github.workspace }}/test/std
          cpp${{ matrix.arch }}${{ matrix.sep }}Test
      
      ## Debugger
      - name: debugger test - compile
        run: |
          cd ${{ github.workspace }}/test/debugger
          haxe compile.hxml -D HXCPP_M${{ matrix.arch }}
      - name: debugger test - run
        run: |
          cd ${{ github.workspace }}/test/debugger
          bin${{ matrix.sep }}App-debug

      ## Native
      - name: native test - compile
        run: |
          cd ${{ github.workspace }}/test/native
          haxe compile.hxml -D HXCPP_M${{ matrix.arch }}
      - name: native test - run
        run: |
          cd ${{ github.workspace }}/test/native
          bin${{ matrix.sep }}Native

      ## Haxe Unit Tests
      - name: haxe unit test - clone haxe repo (latest)
        if: ${{ inputs.haxe }} == 'latest'
        run: |
          cd ${{ github.workspace }}
          git clone -q https://github.com/HaxeFoundation/haxe.git
          cd haxe
          git checkout -b development
      - name: haxe unit test - clone haxe repo (${{ inputs.haxe }})
        if: ${{ inputs.haxe }} != 'latest'
        run: |
          cd ${{ github.workspace }}
          git clone -q https://github.com/HaxeFoundation/haxe.git
          cd haxe
          git checkout -b ${{ inputs.haxe }}
      - name: haxe unit test - install haxelib
        run: |
          cd ${{ github.workspace }}/haxe/tests/unit
          haxelib install compile-cpp.hxml --always
      - name: haxe unit test - compile
        run: |
          cd ${{ github.workspace }}/haxe/tests/unit
          haxe compile-cpp.hxml -D HXCPP_M${{ matrix.arch }} -D no_http
      - name: haxe unit test - run
        run: |
          cd ${{ github.workspace }}/haxe/tests/unit
          bin${{ matrix.sep }}cpp${{ matrix.sep }}TestMain-debug